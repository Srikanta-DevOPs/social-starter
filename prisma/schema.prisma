generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  handle       String   @unique
  name         String
  email        String   @unique
  passwordHash String
<<<<<<< HEAD
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  posts    Post[]
  comments Comment[]
  likes    Like[]
  resets   PasswordReset[]
}

model Post {
  id        String   @id @default(cuid())
  authorId  String
  content   String
  imageUrl  String?
  createdAt DateTime @default(now())

  author   User      @relation(fields: [authorId], references: [id])
  comments Comment[]
  likes    Like[]

  @@index([authorId, createdAt])
=======
  bio          String?
  avatarUrl    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  posts     Post[]
  comments  Comment[]
  likes     Like[]    @relation("UserLikes")
  following Follow[]  @relation("Following")
  followers Follow[]  @relation("Followers")
}

model Post {
  id        String        @id @default(cuid())
  authorId  String
  author    User          @relation(fields: [authorId], references: [id])
  content   String
  imageUrl  String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  comments  Comment[]
  likes     Like[]
  hashtags  PostHashtag[]
>>>>>>> 1e78a84ba37c5432150f9a5c011193a42dc406a5
}

model Comment {
  id        String   @id @default(cuid())
  postId    String
  authorId  String
<<<<<<< HEAD
  content   String
  createdAt DateTime @default(now())

  post   Post @relation(fields: [postId], references: [id])
  author User @relation(fields: [authorId], references: [id])

  @@index([postId, createdAt])
=======
  post      Post     @relation(fields: [postId], references: [id])
  author    User     @relation(fields: [authorId], references: [id])
  content   String
  createdAt DateTime @default(now())
>>>>>>> 1e78a84ba37c5432150f9a5c011193a42dc406a5
}

model Like {
  id     String @id @default(cuid())
  postId String
  userId String
<<<<<<< HEAD

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])
=======
  post   Post   @relation(fields: [postId], references: [id])
  user   User   @relation("UserLikes", fields: [userId], references: [id])
>>>>>>> 1e78a84ba37c5432150f9a5c011193a42dc406a5

  @@unique([postId, userId])
}

<<<<<<< HEAD
model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  code      String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
}

model OtpRequest {
  id        String   @id @default(cuid())
  email     String
  ip        String
  createdAt DateTime @default(now())

  @@index([email, createdAt])
  @@index([ip, createdAt])
=======
model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  follower    User     @relation("Following", fields: [followerId], references: [id])
  following   User     @relation("Followers", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Hashtag {
  id    String        @id @default(cuid())
  tag   String        @unique
  posts PostHashtag[]
}

model PostHashtag {
  postId    String
  hashtagId String
  post      Post    @relation(fields: [postId], references: [id])
  hashtag   Hashtag @relation(fields: [hashtagId], references: [id])

  @@id([postId, hashtagId])
>>>>>>> 1e78a84ba37c5432150f9a5c011193a42dc406a5
}
